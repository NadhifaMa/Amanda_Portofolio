{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "91b1ef84"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from datetime import datetime"
      ],
      "id": "91b1ef84"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5d4a3e7b",
        "outputId": "8b9b63a8-87bc-41b6-fefe-49c19c46af75"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: openpyxl in /usr/local/lib/python3.10/dist-packages (3.1.2)\n",
            "Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.10/dist-packages (from openpyxl) (1.1.0)\n"
          ]
        }
      ],
      "source": [
        "!pip install openpyxl"
      ],
      "id": "5d4a3e7b"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0y3m3QcIjPdp"
      },
      "outputs": [],
      "source": [
        "#Definisi Interval Pengamatan\n",
        "start_interval = pd.to_datetime('2020-01-01') # interval awal adalah t=0\n",
        "end_interval = pd.to_datetime('2022-01-01')"
      ],
      "id": "0y3m3QcIjPdp"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "afe442ab"
      },
      "source": [
        "# Input Data"
      ],
      "id": "afe442ab"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e3145d52"
      },
      "source": [
        "## Memfilter Data Transisi"
      ],
      "id": "e3145d52"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "59bae13b",
        "outputId": "13feb41f-de35-4446-bb1d-cd85f7eb6c4c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         PSTV01     PSTV03     PSTV05       PSTV17  PSTV18             FKL02  \\\n",
              "0     312193236 2005-11-10  LAKI-LAKI        AKTIF     NaN  153810420V002005   \n",
              "1      59487576 1958-02-15  LAKI-LAKI        AKTIF     NaN  306550220V007050   \n",
              "2      93710033 2015-05-24  PEREMPUAN        AKTIF     NaN  196620121V004042   \n",
              "3     327412628 2013-06-02  PEREMPUAN        AKTIF     NaN  189900120V005806   \n",
              "4      65495502 1985-10-12  LAKI-LAKI        AKTIF     NaN  217430920V005850   \n",
              "...         ...        ...        ...          ...     ...               ...   \n",
              "1725  402784516 1980-06-14  PEREMPUAN        AKTIF     NaN  129640820V000325   \n",
              "1726  411122391 2018-08-25  PEREMPUAN    MENINGGAL  2020.0  243110120V005090   \n",
              "1727  352600094 1988-08-23  LAKI-LAKI        AKTIF     NaN  342690620V001538   \n",
              "1728  342618117 1998-11-11  LAKI-LAKI        AKTIF     NaN  323250920V002245   \n",
              "1729  284768472 1998-02-04  LAKI-LAKI  TIDAK AKTIF     NaN  323250120V003426   \n",
              "\n",
              "          FKL03 FKL15A  Usia  idstatus  trans Kategori_Usia  \n",
              "0    2020-04-29    A18    14         2      1   10-20 tahun  \n",
              "1    2020-02-28    A19    61         1      1   60-70 tahun  \n",
              "2    2021-01-16    A18     4         2      1     <10 tahun  \n",
              "3    2020-01-29    A18     6         2      1     <10 tahun  \n",
              "4    2020-09-28    A18    34         2      1   30-40 tahun  \n",
              "...         ...    ...   ...       ...    ...           ...  \n",
              "1725 2020-08-06    A18    39         2      1   30-40 tahun  \n",
              "1726 2020-01-18    A18     1         2      1     <10 tahun  \n",
              "1727 2020-06-23    A18    31         2      1   30-40 tahun  \n",
              "1728 2020-09-11    A18    21         2      1   20-30 tahun  \n",
              "1729 2020-01-27    A18    21         2      1   20-30 tahun  \n",
              "\n",
              "[1730 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d43026a6-1a9e-4a65-836b-d3a1aa3c510e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PSTV01</th>\n",
              "      <th>PSTV03</th>\n",
              "      <th>PSTV05</th>\n",
              "      <th>PSTV17</th>\n",
              "      <th>PSTV18</th>\n",
              "      <th>FKL02</th>\n",
              "      <th>FKL03</th>\n",
              "      <th>FKL15A</th>\n",
              "      <th>Usia</th>\n",
              "      <th>idstatus</th>\n",
              "      <th>trans</th>\n",
              "      <th>Kategori_Usia</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>312193236</td>\n",
              "      <td>2005-11-10</td>\n",
              "      <td>LAKI-LAKI</td>\n",
              "      <td>AKTIF</td>\n",
              "      <td>NaN</td>\n",
              "      <td>153810420V002005</td>\n",
              "      <td>2020-04-29</td>\n",
              "      <td>A18</td>\n",
              "      <td>14</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>10-20 tahun</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>59487576</td>\n",
              "      <td>1958-02-15</td>\n",
              "      <td>LAKI-LAKI</td>\n",
              "      <td>AKTIF</td>\n",
              "      <td>NaN</td>\n",
              "      <td>306550220V007050</td>\n",
              "      <td>2020-02-28</td>\n",
              "      <td>A19</td>\n",
              "      <td>61</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>60-70 tahun</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>93710033</td>\n",
              "      <td>2015-05-24</td>\n",
              "      <td>PEREMPUAN</td>\n",
              "      <td>AKTIF</td>\n",
              "      <td>NaN</td>\n",
              "      <td>196620121V004042</td>\n",
              "      <td>2021-01-16</td>\n",
              "      <td>A18</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>&lt;10 tahun</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>327412628</td>\n",
              "      <td>2013-06-02</td>\n",
              "      <td>PEREMPUAN</td>\n",
              "      <td>AKTIF</td>\n",
              "      <td>NaN</td>\n",
              "      <td>189900120V005806</td>\n",
              "      <td>2020-01-29</td>\n",
              "      <td>A18</td>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>&lt;10 tahun</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>65495502</td>\n",
              "      <td>1985-10-12</td>\n",
              "      <td>LAKI-LAKI</td>\n",
              "      <td>AKTIF</td>\n",
              "      <td>NaN</td>\n",
              "      <td>217430920V005850</td>\n",
              "      <td>2020-09-28</td>\n",
              "      <td>A18</td>\n",
              "      <td>34</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>30-40 tahun</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1725</th>\n",
              "      <td>402784516</td>\n",
              "      <td>1980-06-14</td>\n",
              "      <td>PEREMPUAN</td>\n",
              "      <td>AKTIF</td>\n",
              "      <td>NaN</td>\n",
              "      <td>129640820V000325</td>\n",
              "      <td>2020-08-06</td>\n",
              "      <td>A18</td>\n",
              "      <td>39</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>30-40 tahun</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1726</th>\n",
              "      <td>411122391</td>\n",
              "      <td>2018-08-25</td>\n",
              "      <td>PEREMPUAN</td>\n",
              "      <td>MENINGGAL</td>\n",
              "      <td>2020.0</td>\n",
              "      <td>243110120V005090</td>\n",
              "      <td>2020-01-18</td>\n",
              "      <td>A18</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>&lt;10 tahun</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1727</th>\n",
              "      <td>352600094</td>\n",
              "      <td>1988-08-23</td>\n",
              "      <td>LAKI-LAKI</td>\n",
              "      <td>AKTIF</td>\n",
              "      <td>NaN</td>\n",
              "      <td>342690620V001538</td>\n",
              "      <td>2020-06-23</td>\n",
              "      <td>A18</td>\n",
              "      <td>31</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>30-40 tahun</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1728</th>\n",
              "      <td>342618117</td>\n",
              "      <td>1998-11-11</td>\n",
              "      <td>LAKI-LAKI</td>\n",
              "      <td>AKTIF</td>\n",
              "      <td>NaN</td>\n",
              "      <td>323250920V002245</td>\n",
              "      <td>2020-09-11</td>\n",
              "      <td>A18</td>\n",
              "      <td>21</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>20-30 tahun</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1729</th>\n",
              "      <td>284768472</td>\n",
              "      <td>1998-02-04</td>\n",
              "      <td>LAKI-LAKI</td>\n",
              "      <td>TIDAK AKTIF</td>\n",
              "      <td>NaN</td>\n",
              "      <td>323250120V003426</td>\n",
              "      <td>2020-01-27</td>\n",
              "      <td>A18</td>\n",
              "      <td>21</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>20-30 tahun</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1730 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d43026a6-1a9e-4a65-836b-d3a1aa3c510e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d43026a6-1a9e-4a65-836b-d3a1aa3c510e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d43026a6-1a9e-4a65-836b-d3a1aa3c510e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5268eefc-3d8b-4d6f-9ec8-3edd9d8a32db\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5268eefc-3d8b-4d6f-9ec8-3edd9d8a32db')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5268eefc-3d8b-4d6f-9ec8-3edd9d8a32db button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dt_transisi",
              "summary": "{\n  \"name\": \"dt_transisi\",\n  \"rows\": 1730,\n  \"fields\": [\n    {\n      \"column\": \"PSTV01\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 160225456,\n        \"min\": 80876,\n        \"max\": 455119962,\n        \"num_unique_values\": 1693,\n        \"samples\": [\n          422798316,\n          336019391,\n          290451995\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PSTV03\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1934-06-29 00:00:00\",\n        \"max\": \"2019-06-09 00:00:00\",\n        \"num_unique_values\": 1603,\n        \"samples\": [\n          \"1992-08-01 00:00:00\",\n          \"1974-10-27 00:00:00\",\n          \"2014-06-17 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PSTV05\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"PEREMPUAN\",\n          \"LAKI-LAKI\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PSTV17\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"TIDAK AKTIF\",\n          \"99\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PSTV18\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.49389861028929455,\n        \"min\": 2020.0,\n        \"max\": 2021.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2020.0,\n          2021.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FKL02\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1730,\n        \"samples\": [\n          \"269840620V000923\",\n          \"316080520V000778\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FKL03\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2020-01-02 00:00:00\",\n        \"max\": \"2021-12-29 00:00:00\",\n        \"num_unique_values\": 437,\n        \"samples\": [\n          \"2020-02-08 00:00:00\",\n          \"2020-09-15 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FKL15A\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"A18\",\n          \"A19\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Usia\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19,\n        \"min\": 0,\n        \"max\": 85,\n        \"num_unique_values\": 84,\n        \"samples\": [\n          67,\n          14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"idstatus\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trans\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kategori_Usia\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"50-60 tahun\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        " import pandas as pd\n",
        "\n",
        "# Read the Excel file into a DataFrame\n",
        "dt_transisi = pd.read_excel('dt_transisi.xlsx')\n",
        "\n",
        "# Drop the \"Unnamed: 0\" column and update the DataFrame\n",
        "dt_transisi.drop(columns=\"Unnamed: 0\", inplace=True)\n",
        "\n",
        "# Display the modified DataFrame\n",
        "dt_transisi\n"
      ],
      "id": "59bae13b"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3bbad287",
        "scrolled": true
      },
      "outputs": [],
      "source": [
        "dt_peserta_m = dt_transisi[dt_transisi['PSTV18'].notna()]\n",
        "dt_peserta_m= dt_peserta_m.reset_index(drop=True)"
      ],
      "id": "3bbad287"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0df9843a"
      },
      "source": [
        "## Overview Data"
      ],
      "id": "0df9843a"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7acb3d38",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b61bb3e6-761e-4847-bc61-6669d8d1bde2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-6-ffd58d60c265>:4: DeprecationWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`\n",
            "  dt_transisi.loc[:, 'Kategori_Usia'] = pd.cut(dt_transisi['Usia'], bins=bins, labels=labels, right=False)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "20-30 tahun          382\n",
              "30-40 tahun          269\n",
              "10-20 tahun          245\n",
              "<10 tahun            242\n",
              "40-50 tahun          217\n",
              "50-60 tahun          182\n",
              "60-70 tahun          143\n",
              "70-80 tahun           40\n",
              ">80 tahun ke atas     10\n",
              "Name: Kategori_Usia, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "#Menentukan interval usia\n",
        "bins = [0, 10, 20, 30, 40, 50, 60, 70, 80, np.inf]\n",
        "labels = ['<10 tahun', '10-20 tahun', '20-30 tahun', '30-40 tahun', '40-50 tahun', '50-60 tahun', '60-70 tahun','70-80 tahun', '>80 tahun ke atas']# Buat label untuk setiap interval\n",
        "dt_transisi.loc[:, 'Kategori_Usia'] = pd.cut(dt_transisi['Usia'], bins=bins, labels=labels, right=False)\n",
        "dt_transisi['Kategori_Usia'].value_counts()"
      ],
      "id": "7acb3d38"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 613
        },
        "id": "1fb3ee1c",
        "outputId": "6cd2e31c-1079-4a60-92be-dac59e782bcf",
        "scrolled": true
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Kategori_Usia  idstatus  Jumlah Orang\n",
              "0           <10 tahun         1            49\n",
              "1           <10 tahun         2           190\n",
              "2         10-20 tahun         1            35\n",
              "3         10-20 tahun         2           205\n",
              "4         20-30 tahun         1            47\n",
              "5         20-30 tahun         2           333\n",
              "6         30-40 tahun         1            42\n",
              "7         30-40 tahun         2           222\n",
              "8         40-50 tahun         1            39\n",
              "9         40-50 tahun         2           169\n",
              "10        50-60 tahun         1            43\n",
              "11        50-60 tahun         2           136\n",
              "12        60-70 tahun         1            39\n",
              "13        60-70 tahun         2            98\n",
              "14        70-80 tahun         1            10\n",
              "15        70-80 tahun         2            26\n",
              "16  >80 tahun ke atas         1             3\n",
              "17  >80 tahun ke atas         2             7"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cfdff80f-fcc4-4c55-ad69-134d0744d65a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Kategori_Usia</th>\n",
              "      <th>idstatus</th>\n",
              "      <th>Jumlah Orang</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>&lt;10 tahun</td>\n",
              "      <td>1</td>\n",
              "      <td>49</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>&lt;10 tahun</td>\n",
              "      <td>2</td>\n",
              "      <td>190</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10-20 tahun</td>\n",
              "      <td>1</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>10-20 tahun</td>\n",
              "      <td>2</td>\n",
              "      <td>205</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20-30 tahun</td>\n",
              "      <td>1</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>20-30 tahun</td>\n",
              "      <td>2</td>\n",
              "      <td>333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>30-40 tahun</td>\n",
              "      <td>1</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>30-40 tahun</td>\n",
              "      <td>2</td>\n",
              "      <td>222</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>40-50 tahun</td>\n",
              "      <td>1</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>40-50 tahun</td>\n",
              "      <td>2</td>\n",
              "      <td>169</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>50-60 tahun</td>\n",
              "      <td>1</td>\n",
              "      <td>43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>50-60 tahun</td>\n",
              "      <td>2</td>\n",
              "      <td>136</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>60-70 tahun</td>\n",
              "      <td>1</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>60-70 tahun</td>\n",
              "      <td>2</td>\n",
              "      <td>98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>70-80 tahun</td>\n",
              "      <td>1</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>70-80 tahun</td>\n",
              "      <td>2</td>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>&gt;80 tahun ke atas</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>&gt;80 tahun ke atas</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cfdff80f-fcc4-4c55-ad69-134d0744d65a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cfdff80f-fcc4-4c55-ad69-134d0744d65a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cfdff80f-fcc4-4c55-ad69-134d0744d65a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bb7a0380-fc64-462b-a834-aa2dfea55c94\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bb7a0380-fc64-462b-a834-aa2dfea55c94')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bb7a0380-fc64-462b-a834-aa2dfea55c94 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dt_anggota\",\n  \"rows\": 18,\n  \"fields\": [\n    {\n      \"column\": \"Kategori_Usia\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"70-80 tahun\",\n          \"10-20 tahun\",\n          \"50-60 tahun\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"idstatus\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Jumlah Orang\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 93,\n        \"min\": 3,\n        \"max\": 333,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          49,\n          190\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "# Menghilangkan data ganda berdasarkan kolom 'Nama' dan 'Usia'\n",
        "dt_anggota = dt_transisi.drop_duplicates(subset=['PSTV01'])\n",
        "\n",
        "dt_anggota.groupby(['Kategori_Usia', 'idstatus']).size().reset_index(name='Jumlah Orang')"
      ],
      "id": "1fb3ee1c"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 613
        },
        "id": "44e75244",
        "outputId": "e6495953-856c-4e0c-c500-ca8475f23913"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Kategori_Usia  PSTV18  Jumlah Orang\n",
              "0           <10 tahun  2020.0             3\n",
              "1           <10 tahun  2021.0             0\n",
              "2         10-20 tahun  2020.0             4\n",
              "3         10-20 tahun  2021.0             2\n",
              "4         20-30 tahun  2020.0             1\n",
              "5         20-30 tahun  2021.0             4\n",
              "6         30-40 tahun  2020.0             1\n",
              "7         30-40 tahun  2021.0             5\n",
              "8         40-50 tahun  2020.0             3\n",
              "9         40-50 tahun  2021.0             6\n",
              "10        50-60 tahun  2020.0             5\n",
              "11        50-60 tahun  2021.0            10\n",
              "12        60-70 tahun  2020.0            10\n",
              "13        60-70 tahun  2021.0             9\n",
              "14        70-80 tahun  2020.0             2\n",
              "15        70-80 tahun  2021.0             3\n",
              "16  >80 tahun ke atas  2020.0             0\n",
              "17  >80 tahun ke atas  2021.0             0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-66b2fbf8-c376-49b7-8dd1-c6f5e5edb234\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Kategori_Usia</th>\n",
              "      <th>PSTV18</th>\n",
              "      <th>Jumlah Orang</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>&lt;10 tahun</td>\n",
              "      <td>2020.0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>&lt;10 tahun</td>\n",
              "      <td>2021.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10-20 tahun</td>\n",
              "      <td>2020.0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>10-20 tahun</td>\n",
              "      <td>2021.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20-30 tahun</td>\n",
              "      <td>2020.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>20-30 tahun</td>\n",
              "      <td>2021.0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>30-40 tahun</td>\n",
              "      <td>2020.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>30-40 tahun</td>\n",
              "      <td>2021.0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>40-50 tahun</td>\n",
              "      <td>2020.0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>40-50 tahun</td>\n",
              "      <td>2021.0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>50-60 tahun</td>\n",
              "      <td>2020.0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>50-60 tahun</td>\n",
              "      <td>2021.0</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>60-70 tahun</td>\n",
              "      <td>2020.0</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>60-70 tahun</td>\n",
              "      <td>2021.0</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>70-80 tahun</td>\n",
              "      <td>2020.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>70-80 tahun</td>\n",
              "      <td>2021.0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>&gt;80 tahun ke atas</td>\n",
              "      <td>2020.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>&gt;80 tahun ke atas</td>\n",
              "      <td>2021.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-66b2fbf8-c376-49b7-8dd1-c6f5e5edb234')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-66b2fbf8-c376-49b7-8dd1-c6f5e5edb234 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-66b2fbf8-c376-49b7-8dd1-c6f5e5edb234');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4e5182a9-7d8a-4139-ade0-521c49b433fc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4e5182a9-7d8a-4139-ade0-521c49b433fc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4e5182a9-7d8a-4139-ade0-521c49b433fc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dt_anggota\",\n  \"rows\": 18,\n  \"fields\": [\n    {\n      \"column\": \"Kategori_Usia\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"70-80 tahun\",\n          \"10-20 tahun\",\n          \"50-60 tahun\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PSTV18\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5144957554275266,\n        \"min\": 2020.0,\n        \"max\": 2021.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2021.0,\n          2020.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Jumlah Orang\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 10,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          10,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "# Menghilangkan data ganda berdasarkan kolom 'Nama' dan 'Usia'\n",
        "dt_anggota = dt_transisi.drop_duplicates(subset=['PSTV01'])\n",
        "\n",
        "dt_anggota.groupby(['Kategori_Usia', 'PSTV18']).size().reset_index(name='Jumlah Orang')"
      ],
      "id": "44e75244"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "36c1a395"
      },
      "outputs": [],
      "source": [
        "with pd.ExcelWriter('dt_transisi.xlsx') as writer:\n",
        "    dt_transisi.to_excel(writer,sheet_name='dt_transisi')"
      ],
      "id": "36c1a395"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "25c67275"
      },
      "source": [
        "## Menghitung Jumlah Transisi"
      ],
      "id": "25c67275"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4745182d",
        "outputId": "5c9ae6f9-f490-4772-f415-b4d03f70a70e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(437,)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "kolom = np.sort(np.unique(dt_transisi['FKL03']))\n",
        "kolom.shape"
      ],
      "id": "4745182d"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1c359b34"
      },
      "outputs": [],
      "source": [
        "#Kelompok Usia\n",
        "c1 = np.zeros((8, len(kolom)))\n",
        "c2 = np.zeros((8, len(kolom)))\n",
        "c3 = np.zeros((8, len(kolom)))\n",
        "c4 = np.zeros((8, len(kolom)))\n",
        "c5 = np.zeros((8, len(kolom)))\n",
        "c6 = np.zeros((8, len(kolom)))\n",
        "c7 = np.zeros((8, len(kolom)))\n",
        "c8 = np.zeros((8, len(kolom)))\n",
        "c9 = np.zeros((8, len(kolom)))\n",
        "#u=usia, j=titik waktu\n",
        "def isi(transisi, u, j):\n",
        "    if u <= 10:\n",
        "        c1[transisi, j] += 1\n",
        "    elif u <= 20:\n",
        "        c2[transisi, j] += 1\n",
        "    elif u <= 30:\n",
        "        c3[transisi, j] += 1\n",
        "    elif u <= 40:\n",
        "        c4[transisi, j] += 1\n",
        "    elif u <= 50:\n",
        "        c5[transisi, j] += 1\n",
        "    elif u <= 60:\n",
        "        c6[transisi, j] += 1\n",
        "    elif u <= 70:\n",
        "        c7[transisi, j] += 1\n",
        "    elif u <= 80:\n",
        "        c8[transisi, j] += 1\n",
        "    else:\n",
        "        c9[transisi, j] += 1"
      ],
      "id": "1c359b34"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "db633fd9"
      },
      "source": [
        "Keterangan\n",
        "1. c1 = kelompok usia 0-10 tahun\n",
        "2. c2 = kelompok usia 11-20 tahun\n",
        "3. c3 = kelompok usia 21-30 tahun\n",
        "4. c4 = kelompok usia 31-40 tahun\n",
        "5. c5 = kelompok usia 41-50 tahun\n",
        "6. c6 = kelompok usia 51-60 tahun\n",
        "7. c7 = kelompok usia 61-70 tahun\n",
        "8. c8 = kelompok usia 71-80 tahun\n",
        "9. c9 = kelompok usia > 80 tahun"
      ],
      "id": "db633fd9"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "695a4b4b"
      },
      "outputs": [],
      "source": [
        "#Perubahan status Transisi\n",
        "S1 = np.zeros((len(np.unique(dt_transisi['PSTV01'])), len(kolom)))\n",
        "S2 = np.zeros((len(np.unique(dt_transisi['PSTV01'])), len(kolom)))\n",
        "S3 = np.zeros((len(np.unique(dt_transisi['PSTV01'])), len(kolom)))\n",
        "S4 = np.zeros((len(np.unique(dt_transisi['PSTV01'])), len(kolom)))\n",
        "S5 = np.zeros((len(np.unique(dt_transisi['PSTV01'])), len(kolom)))\n",
        "S6 = np.zeros((len(np.unique(dt_transisi['PSTV01'])), len(kolom)))\n",
        "S7 = np.zeros((len(np.unique(dt_transisi['PSTV01'])), len(kolom)))\n",
        "S8 = np.zeros((len(np.unique(dt_transisi['PSTV01'])), len(kolom)))\n",
        "S9 = np.zeros((len(np.unique(dt_transisi['PSTV01'])), len(kolom)))\n",
        "\n",
        "def isi_status(individu, u, status, tanggal):\n",
        "    if u <= 10:\n",
        "        S1[individu, tanggal] = status\n",
        "    elif u <= 20:\n",
        "        S2[individu, tanggal] = status\n",
        "    elif u <= 30:\n",
        "        S3[individu, tanggal] = status\n",
        "    elif u <= 40:\n",
        "        S4[individu, tanggal] = status\n",
        "    elif u <= 50:\n",
        "        S5[individu, tanggal] = status\n",
        "    elif u <= 60:\n",
        "        S6[individu, tanggal] = status\n",
        "    elif u <= 70:\n",
        "        S7[individu, tanggal] = status\n",
        "    elif u <= 80:\n",
        "        S8[individu, tanggal] = status\n",
        "    else:\n",
        "        S9[individu, tanggal] = status"
      ],
      "id": "695a4b4b"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4qnN8MEvV-w4",
        "outputId": "b7e419ad-b20b-437c-d69d-3fd8635f59c6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0., 0., 0., ..., 0., 0., 0.],\n",
              "       [0., 0., 0., ..., 0., 0., 0.],\n",
              "       [0., 0., 0., ..., 0., 0., 0.],\n",
              "       ...,\n",
              "       [0., 0., 0., ..., 0., 0., 0.],\n",
              "       [0., 0., 0., ..., 0., 0., 0.],\n",
              "       [0., 0., 0., ..., 0., 0., 0.]])"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "S1"
      ],
      "id": "4qnN8MEvV-w4"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2807d352"
      },
      "source": [
        "Keterangan Transisi:\n",
        "- 0 = Transisi dari status 1->1\n",
        "- 1 = Transisi dari status 1->2\n",
        "- 2 = Transisi dari status 1->3\n",
        "- 3 = Transisi dari status 1->4\n",
        "- 4 = Transisi dari status 2->2\n",
        "- 5 = Transisi dari status 2->4\n",
        "- 6 = Transisi dari status 3->3\n",
        "- 7 = Transisi dari status 3->4\n"
      ],
      "id": "2807d352"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7721d95b"
      },
      "outputs": [],
      "source": [
        "i=0\n",
        "td = np.zeros(len(dt_transisi), dtype='datetime64[ns]')\n",
        "while i < len(dt_transisi):\n",
        "    if pd.isna(dt_transisi['PSTV18'][i]):\n",
        "        td[i] = np.datetime64('NaT')\n",
        "    else:\n",
        "        if dt_transisi['PSTV18'][i] == 2020:\n",
        "            td[i] = np.datetime64(\"2020-12-31\")\n",
        "        else:\n",
        "            td[i] = np.datetime64(\"2021-12-31\")\n",
        "    i=i+1"
      ],
      "id": "7721d95b"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5a83a218"
      },
      "outputs": [],
      "source": [
        "dt_transisi.sort_values(by='PSTV01', inplace=True)"
      ],
      "id": "5a83a218"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "70yKSsUXrmfp",
        "outputId": "23d16f24-57a3-4299-ea90-96bb05849c6c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1730,)"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "td.shape"
      ],
      "id": "70yKSsUXrmfp"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cDrJRjPkX6Ow"
      },
      "outputs": [],
      "source": [
        "k=-1\n",
        "i=0\n",
        "for i in range(len(dt_transisi['PSTV01'])):\n",
        "  masuk = dt_transisi['PSTV03'].iloc[i] #Tanggal Lahir\n",
        "  x_1_s = dt_transisi['idstatus'].iloc[i]  # status awal ketika transisi status pertama\n",
        "  tx1 = dt_transisi['FKL03'].iloc[i]  # waktu awal ketika transisi status pertama\n",
        "  if dt_transisi['PSTV01'].iloc[i] == dt_transisi['PSTV01'].iloc[i - 1]:\n",
        "    i = i - 1\n",
        "    x_2_s = dt_transisi['idstatus'].iloc[i] #status awal ketika transisi status kedua\n",
        "    tx2 = dt_transisi['FKL03'].iloc[i] #waktu awal ketika transisi status\n",
        "    j=0\n",
        "    while j<len(kolom):\n",
        "      u = np.floor((kolom[j] - masuk).days / 365)\n",
        "      if u <= 0:\n",
        "        pass  #untuk bayi yang belum lahir tidak diperhitungkan\n",
        "      elif kolom[j] < tx2:\n",
        "        isi(0, u, j)\n",
        "        isi_status(k, u, 0, j)\n",
        "      elif kolom[j] == tx2: #Jika titik waktu = waktu awal ketika transisi status ke status 3 atau status 2, sehingga status berubah dari 1->2 / 1->3\n",
        "        if x_1_s == 1:\n",
        "          isi(1, u, j)\n",
        "          isi_status(k, u, 1, j)\n",
        "        else:\n",
        "          isi(2, u, j)\n",
        "          isi_status(k, u, 2, j)\n",
        "      elif kolom[j] > tx2 and kolom[j]<tx1: #JIka titik waktu =waktu awal dan < dari waktu awal kedua ketika transisi status, maka individu masih sakit selama titik waktu (2->2,3->3)\n",
        "        if x_2_s == x_1_s:\n",
        "          if x_1_s == 1:\n",
        "            isi(4, u, j)\n",
        "            isi_status(k, u, 1, j)\n",
        "          else:\n",
        "            isi(6, u, j)\n",
        "            isi_status(k, u, 2, j)\n",
        "        else:\n",
        "          pass\n",
        "      elif kolom[j]==td[i]:\n",
        "        if x_1_s == 1:\n",
        "          isi(5, u, j)\n",
        "          isi_status(k, u, 3, j)\n",
        "        else:\n",
        "          isi(7, u, j)\n",
        "          isi_status(k, u, 3, j)\n",
        "      elif kolom[j]>td[i]: #Jika titik waktu = waktu meninggal individu, maka individu bertransisi dari status(2->4/3->4)\n",
        "        if x_1_s == 1:\n",
        "          isi(5, u, j)\n",
        "          isi_status(k, u, 3, j)\n",
        "        else:\n",
        "          isi(7, u, j)\n",
        "          isi_status(k, u, 3, j)\n",
        "        break\n",
        "      j += 1\n",
        "   #i += 1\n",
        "  elif dt_transisi['PSTV01'].iloc[i] != dt_transisi['PSTV01'].iloc[i - 1]:\n",
        "    k += 1\n",
        "    j = 0\n",
        "    while j<len(kolom):\n",
        "      u = np.floor((kolom[j] - masuk).days / 365)\n",
        "      if u <= 0:\n",
        "        pass  #untuk bayi yang belum lahir tidak diperhitungkan\n",
        "      elif kolom[j] < tx1:\n",
        "        isi(0, u, j)\n",
        "        isi_status(k, u, 0, j)\n",
        "      elif kolom[j] == tx1: #Jika titik waktu = waktu awal ketika transisi status ke status 3 atau status 2, sehingga status berubah dari 1->2 / 1->3\n",
        "        if x_1_s == 1:\n",
        "          isi(1, u, j)\n",
        "          isi_status(k, u, 1, j)\n",
        "        else:\n",
        "          isi(2, u, j)\n",
        "          isi_status(k, u, 2, j)\n",
        "      elif kolom[j] > tx1 and pd.isna(td[i]) ==True:  #Jika titik waktu > waktu awal ketika transisi status dan waktu meninggal 0, maka individu sedang mengalami sakit tetapi belum meninggal (2->2,3->3)\n",
        "        if x_1_s == 1:\n",
        "          isi(4, u, j)\n",
        "          isi_status(k, u, 1, j)\n",
        "        else:\n",
        "          isi(6, u, j)\n",
        "          isi_status(k, u, 2, j)\n",
        "      elif kolom[j] > tx1 and kolom[j] < td[i]: #Jika titik waktu >waktu awal ketika transisi status dan waktu kematian < titik waktu, maka individu sedang mengalami sakit tetapi belum meninggal (2->2,3->3)\n",
        "        if x_1_s == 1:\n",
        "          isi(4, u, j)\n",
        "          isi_status(k, u, 1, j)\n",
        "        else:\n",
        "          isi(6, u, j)\n",
        "          isi_status(k, u, 2, j)\n",
        "      elif kolom[j]==td[i]: #Jika titik waktu = waktu meninggal individu, maka individu bertransisi dari status(2->4/3->4)\n",
        "        if x_1_s == 1:\n",
        "          isi(5, u, j)\n",
        "          isi_status(k, u, 3, j)\n",
        "        else:\n",
        "          isi(7, u, j)\n",
        "          isi_status(k, u, 3, j)\n",
        "      elif kolom[j]>td[i]: #Jika titik waktu = waktu meninggal individu, maka individu bertransisi dari status(2->4/3->4)\n",
        "        if x_1_s == 1:\n",
        "          isi(5, u, j)\n",
        "          isi_status(k, u, 3, j)\n",
        "        else:\n",
        "          isi(7, u, j)\n",
        "          isi_status(k, u, 3, j)\n",
        "        break\n",
        "      j += 1\n"
      ],
      "id": "cDrJRjPkX6Ow"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "04589c26"
      },
      "source": [
        "## Hasil Output Status dan Usia"
      ],
      "id": "04589c26"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0a816eea"
      },
      "outputs": [],
      "source": [
        "matriksusia1 = pd.DataFrame(c1)\n",
        "matriksusia2 = pd.DataFrame(c2)\n",
        "matriksusia3 = pd.DataFrame(c3)\n",
        "matriksusia4 = pd.DataFrame(c4)\n",
        "matriksusia5 = pd.DataFrame(c5)\n",
        "matriksusia6 = pd.DataFrame(c6)\n",
        "matriksusia7 = pd.DataFrame(c7)\n",
        "matriksusia8 = pd.DataFrame(c8)\n",
        "matriksusia9 = pd.DataFrame(c9)\n",
        "\n",
        "with pd.ExcelWriter('matriksusia.xlsx') as writer:\n",
        "    matriksusia1.to_excel(writer,sheet_name='matriksusia1')\n",
        "    matriksusia2.to_excel(writer,sheet_name='matriksusia2')\n",
        "    matriksusia3.to_excel(writer,sheet_name='matriksusia3')\n",
        "    matriksusia4.to_excel(writer,sheet_name='matriksusia4')\n",
        "    matriksusia5.to_excel(writer,sheet_name='matriksusia5')\n",
        "    matriksusia6.to_excel(writer,sheet_name='matriksusia6')\n",
        "    matriksusia7.to_excel(writer,sheet_name='matriksusia7')\n",
        "    matriksusia8.to_excel(writer,sheet_name='matriksusia8')\n",
        "    matriksusia9.to_excel(writer,sheet_name='matriksusia9')"
      ],
      "id": "0a816eea"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4fb60176"
      },
      "outputs": [],
      "source": [
        "statususia1 = pd.DataFrame(S1)\n",
        "statususia2 = pd.DataFrame(S2)\n",
        "statususia3 = pd.DataFrame(S3)\n",
        "statususia4 = pd.DataFrame(S4)\n",
        "statususia5 = pd.DataFrame(S5)\n",
        "statususia6 = pd.DataFrame(S6)\n",
        "statususia7 = pd.DataFrame(S7)\n",
        "statususia8 = pd.DataFrame(S8)\n",
        "statususia9 = pd.DataFrame(S9)\n",
        "with pd.ExcelWriter('statususia.xlsx') as writer:\n",
        "    statususia1.to_excel(writer,sheet_name='statususia1')\n",
        "    statususia2.to_excel(writer,sheet_name='statususia2')\n",
        "    statususia3.to_excel(writer,sheet_name='statususia3')\n",
        "    statususia4.to_excel(writer,sheet_name='statususia4')\n",
        "    statususia5.to_excel(writer,sheet_name='statususia5')\n",
        "    statususia6.to_excel(writer,sheet_name='statususia6')\n",
        "    statususia7.to_excel(writer,sheet_name='statususia7')\n",
        "    statususia8.to_excel(writer,sheet_name='statususia8')\n",
        "    statususia9.to_excel(writer,sheet_name='statususia9')"
      ],
      "id": "4fb60176"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "64989911"
      },
      "source": [
        "### Jumlah Transisi dari sehat ke sehat"
      ],
      "id": "64989911"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fce36b2d"
      },
      "outputs": [],
      "source": [
        "c_1 = np.zeros((1,len(kolom)))\n",
        "c_2 = np.zeros((1,len(kolom)))\n",
        "c_3 = np.zeros((1,len(kolom)))\n",
        "c_4 = np.zeros((1,len(kolom)))\n",
        "c_5 = np.zeros((1,len(kolom)))\n",
        "c_6 = np.zeros((1,len(kolom)))\n",
        "c_7 = np.zeros((1,len(kolom)))\n",
        "c_8 = np.zeros((1,len(kolom)))\n",
        "c_9 = np.zeros((1,len(kolom)))"
      ],
      "id": "fce36b2d"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "116a95b5"
      },
      "outputs": [],
      "source": [
        "def isi2(u,j):\n",
        "    if u<11:\n",
        "        c_1[0,j] += 1\n",
        "    elif u<21:\n",
        "        c_2[0,j] += 1\n",
        "    elif u<31:\n",
        "        c_3[0,j] += 1\n",
        "    elif u<41:\n",
        "        c_4[0,j] += 1\n",
        "    elif u<51:\n",
        "        c_5[0,j] += 1\n",
        "    elif u<61:\n",
        "        c_6[0,j] += 1\n",
        "    elif u<71:\n",
        "        c_7[0,j] += 1\n",
        "    elif u<81:\n",
        "        c_8[0,j] += 1\n",
        "    else:\n",
        "        c_9[0,j] += 1"
      ],
      "id": "116a95b5"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ebd0b3f2"
      },
      "source": [
        "### Jumlah Transisi sehat ke meninggal"
      ],
      "id": "ebd0b3f2"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "db1738f5"
      },
      "outputs": [],
      "source": [
        "c_1_4 = np.zeros((1,len(kolom)))\n",
        "c_2_4 = np.zeros((1,len(kolom)))\n",
        "c_3_4 = np.zeros((1,len(kolom)))\n",
        "c_4_4 = np.zeros((1,len(kolom)))\n",
        "c_5_4 = np.zeros((1,len(kolom)))\n",
        "c_6_4 = np.zeros((1,len(kolom)))\n",
        "c_7_4 = np.zeros((1,len(kolom)))\n",
        "c_8_4 = np.zeros((1,len(kolom)))\n",
        "c_9_4 = np.zeros((1,len(kolom)))"
      ],
      "id": "db1738f5"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "babc7a7e"
      },
      "outputs": [],
      "source": [
        "def isi3(u,j):\n",
        "    if u<11:\n",
        "        c_1_4[0,j] += 1\n",
        "    elif u<21:\n",
        "        c_2_4[0,j] += 1\n",
        "    elif u<31:\n",
        "        c_3_4[0,j] += 1\n",
        "    elif u<31:\n",
        "        c_3_4[0,j] += 1\n",
        "    elif u<41:\n",
        "        c_4_4[0,j] += 1\n",
        "    elif u<51:\n",
        "        c_5_4[0,j] += 1\n",
        "    elif u<61:\n",
        "        c_6_4[0,j] += 1\n",
        "    elif u<71:\n",
        "        c_7_4[0,j] += 1\n",
        "    elif u<81:\n",
        "        c_8_4[0,j] += 1\n",
        "    else:\n",
        "        c_9_4[0,j] += 1"
      ],
      "id": "babc7a7e"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "56e3d8c7"
      },
      "source": [
        "Keterangan:\n",
        "- u : usia\n",
        "- j : titik waktu"
      ],
      "id": "56e3d8c7"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "610937d2",
        "scrolled": true
      },
      "outputs": [],
      "source": [
        "td = np.zeros(len(dt_peserta_m), dtype='datetime64[D]')\n",
        "for i in range(len(dt_peserta_m)):\n",
        "    if pd.isna(dt_peserta_m['PSTV18'][i]):\n",
        "        td[i] = np.datetime64('NaT')\n",
        "    else:\n",
        "        if dt_peserta_m['PSTV18'][i] == 2020:\n",
        "            td[i] = np.datetime64(\"2020-12-31\")\n",
        "        else:\n",
        "            td[i] = np.datetime64(\"2021-12-31\")\n",
        "\n",
        "    j=0\n",
        "    while j<len(kolom):\n",
        "        u=(kolom[j]-dt_peserta_m['PSTV03'].iloc[i]).days/365 #Usia individu pada titik waktu\n",
        "        if u<0: #Jika belum lahir, individu tidak diperhitungkan\n",
        "            pass\n",
        "        elif pd.isna(td[i]) ==True: # Jika individu belum meninggal, individu masih berada di status sehat di titik waktu sehingga berransisi 1->1 j\n",
        "            isi2(u,j)\n",
        "        elif (kolom[j]<td[i]): #Jika titik waktu < waktu meninggal, maka pada titik waktu j individu sehat, sehingga berransisi 1->1\n",
        "            isi2(u,j)\n",
        "        elif kolom[j]>td[i]: #Jika titik waktu > waktu meninggal, maka individu sudah meninggal sehingga individu bertransisi 1->4\n",
        "            isi3(u,j)\n",
        "            break\n",
        "        elif kolom[j]==td[i]:  #Jika titik waktu = waktu meninggal, maka individu sudah meninggal sehingga individu bertransisi 1->4\n",
        "            isi3(u,j)\n",
        "        j=j+1"
      ],
      "id": "610937d2"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "311439ab"
      },
      "outputs": [],
      "source": [
        "matriksusia_1 = pd.DataFrame(c_1)\n",
        "matriksusia_2 = pd.DataFrame(c_2)\n",
        "matriksusia_3 = pd.DataFrame(c_3)\n",
        "matriksusia_4 = pd.DataFrame(c_4)\n",
        "matriksusia_5 = pd.DataFrame(c_5)\n",
        "matriksusia_6 = pd.DataFrame(c_6)\n",
        "matriksusia_7 = pd.DataFrame(c_7)\n",
        "matriksusia_8 = pd.DataFrame(c_8)\n",
        "matriksusia_9 = pd.DataFrame(c_9)\n",
        "\n",
        "with pd.ExcelWriter('sehatsehat.xlsx') as writer:\n",
        "    matriksusia_1.to_excel(writer,sheet_name='matriksusia_1')\n",
        "    matriksusia_2.to_excel(writer,sheet_name='matriksusia_2')\n",
        "    matriksusia_3.to_excel(writer,sheet_name='matriksusia_3')\n",
        "    matriksusia_4.to_excel(writer,sheet_name='matriksusia_4')\n",
        "    matriksusia_5.to_excel(writer,sheet_name='matriksusia_5')\n",
        "    matriksusia_6.to_excel(writer,sheet_name='matriksusia_6')\n",
        "    matriksusia_7.to_excel(writer,sheet_name='matriksusia_7')\n",
        "    matriksusia_8.to_excel(writer,sheet_name='matriksusia_8')\n",
        "    matriksusia_9.to_excel(writer,sheet_name='matriksusia_9')"
      ],
      "id": "311439ab"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bb907644"
      },
      "outputs": [],
      "source": [
        "matriksusia_1_4 = pd.DataFrame(c_1_4)\n",
        "matriksusia_2_4 = pd.DataFrame(c_2_4)\n",
        "matriksusia_3_4 = pd.DataFrame(c_3_4)\n",
        "matriksusia_4_4 = pd.DataFrame(c_4_4)\n",
        "matriksusia_5_4 = pd.DataFrame(c_5_4)\n",
        "matriksusia_6_4 = pd.DataFrame(c_6_4)\n",
        "matriksusia_7_4 = pd.DataFrame(c_7_4)\n",
        "matriksusia_8_4 = pd.DataFrame(c_8_4)\n",
        "matriksusia_9_4 = pd.DataFrame(c_9_4)\n",
        "\n",
        "with pd.ExcelWriter('menujukematian.xlsx') as writer:\n",
        "    matriksusia_1_4.to_excel(writer,sheet_name='matriksusia_1_4')\n",
        "    matriksusia_2_4.to_excel(writer,sheet_name='matriksusia_2_4')\n",
        "    matriksusia_3_4.to_excel(writer,sheet_name='matriksusia_3_4')\n",
        "    matriksusia_4_4.to_excel(writer,sheet_name='matriksusia_4_4')\n",
        "    matriksusia_5_4.to_excel(writer,sheet_name='matriksusia_5_4')\n",
        "    matriksusia_6_4.to_excel(writer,sheet_name='matriksusia_6_4')\n",
        "    matriksusia_7_4.to_excel(writer,sheet_name='matriksusia_7_4')\n",
        "    matriksusia_8_4.to_excel(writer,sheet_name='matriksusia_8_4')\n",
        "    matriksusia_9_4.to_excel(writer,sheet_name='matriksusia_9_4')"
      ],
      "id": "bb907644"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "69aa9c2c"
      },
      "source": [
        "## Total waktu peserta berada di status 1\n",
        "Pertimbangan selang waktu sebelum pelayanan"
      ],
      "id": "69aa9c2c"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "a69f206b"
      },
      "outputs": [],
      "source": [
        "from scipy.stats import mode\n",
        "#Mengambil data peserta\n",
        "datapeserta2=dt_transisi.drop_duplicates(subset='PSTV01')\n",
        "#re-index\n",
        "datapeserta2 = datapeserta2.reset_index(drop=True)\n",
        "#mengubah data tahun lahir peserta menjadi datetime type\n",
        "datapeserta2['PSTV03'] = pd.to_datetime(datapeserta2['PSTV03'])\n",
        "\n",
        "t1_reguler = np.zeros((9, len(kolom)))\n",
        "#Mendefinisikan t0 dengan interval awal pengamatan\n",
        "t0 = start_interval\n",
        "#Mendefinisikan kolom2 dengan titik2 hari diantara interval awal dengan maksimum hari pelayanan FKRTL\n",
        "kolom2 = np.arange(t0, np.max(kolom), dtype='datetime64[D]')\n",
        "kolom2 = kolom2.astype('datetime64[ns]')\n",
        "\n",
        "i = 0\n",
        "td = np.zeros(len(datapeserta2), dtype='datetime64[ns]') #Mendefinisikan waktu kematian\n",
        "while i < len(datapeserta2):\n",
        "    if pd.isna(datapeserta2['PSTV18'][i]):\n",
        "        td[i] = np.datetime64('NaT')\n",
        "    else:\n",
        "        if datapeserta2['PSTV18'][i] == 2020:\n",
        "            td[i] = np.datetime64(\"2020-12-31\")\n",
        "        else:\n",
        "            td[i] = np.datetime64(\"2021-12-31\")\n",
        "\n",
        "    j = 0\n",
        "\n",
        "    while j < len(kolom):\n",
        "        tgl = kolom[j]\n",
        "\n",
        "        if td[i] == pd.NaT:  # Jika individu masih hidup\n",
        "            if t0 < datapeserta2['PSTV03'][i] <= tgl:\n",
        "                t1_reguler[0, j] += (1 + (tgl - datapeserta2['PSTV03'][i]))\n",
        "            else:\n",
        "                masuk = (t0 - datapeserta2['PSTV03'][i]).days / 365 #Usia masuk pengamatan\n",
        "                keluar = (tgl - datapeserta2['PSTV03'][i]).days / 365 #Usia ketika titik waktu\n",
        "\n",
        "                if np.floor((abs(keluar - 1) / 10)) == np.floor((masuk / 10 - 1)): #Jika usia masuk dan usia ketika titik waktu sama, maka total waktu berada di status sehat adalah selisih titik waktu dengan interval awal\n",
        "                    if (np.floor(keluar/10 - 1).astype(int) + 1) > 8: #Jika index>8 maka peserta masuk ke rentang usia >80\n",
        "                        t1_reguler[8, j] +=  (1 + ((tgl - t0).astype('timedelta64[D]')).astype('int'))\n",
        "                    else:\n",
        "                        t1_reguler[np.floor(abs(keluar/10 - 1)).astype(int), j] +=  (1 + ((tgl - t0).astype('timedelta64[D]')).astype('int'))\n",
        "                else: #Jika usia masuk dan usia ketika titik waktu berbeda, maka waktu ketika berada distatus tertentu dibagi menjadi dua yaitu usia masuk dan usia keluar\n",
        "                    u2=np.zeros((len(kolom2))) #Mendefinisikan kolom bernilai 0 dengan panjang kolom2\n",
        "                    for k in range(len(kolom2)):\n",
        "                        u2[k] = (kolom2[k] - (datapeserta2['PSTV03'][i])).days / 365\n",
        "                        u2[k] = np.floor((u2[k] - 1) / 10)\n",
        "                    unique_elements = np.unique(u2)\n",
        "                    second_unique_element = unique_elements[1]\n",
        "                    indices_of_second_unique = np.where(u2 == second_unique_element)[0] #Mencari index ketika usia keluar\n",
        "                    u = indices_of_second_unique[0]\n",
        "                    if (np.floor(abs(keluar - 1) / 10).astype(int) + 1) > 8 or (np.floor(abs(masuk - 1) / 10).astype(int) + 1)>8:\n",
        "                        t1_reguler[8, j]+=  (kolom2[int(u)] - t0).days\n",
        "                        t1_reguler[8, j]+=  (1 + ((tgl - kolom2[int(u)]).astype('timedelta64[D]')).astype('int'))\n",
        "                    else:\n",
        "                        t1_reguler[np.floor(abs(masuk - 1) / 10).astype(int), j] +=  (kolom2[int(u)] - t0).days\n",
        "                        t1_reguler[np.floor(abs(keluar - 1) / 10).astype(int), j] +=  (1 + ((tgl - kolom2[int(u)]).astype('timedelta64[D]')).astype('int'))\n",
        "\n",
        "        else: #Jika individu diketahui meninggal\n",
        "            if td[i] <= tgl: #Jika pada pelayanan peserta telah meninggal tidak dihitung\n",
        "                break\n",
        "            elif t0 < datapeserta2['PSTV03'][i] < tgl: # maka peserta pasti berusia <10 tahun\n",
        "                t1_reguler[0, j] +=  (1 + (tgl - datapeserta2['PSTV03'][i]))\n",
        "            elif t0 < tgl:\n",
        "                masuk = (t0 - datapeserta2['PSTV03'][i]).days / 365\n",
        "                keluar = (tgl - datapeserta2['PSTV03'][i]).days / 365\n",
        "\n",
        "                if np.floor(abs(keluar - 1) / 10) == np.floor(abs(masuk - 1) / 10):\n",
        "                    if (np.floor(abs(keluar - 1) / 10).astype(int) + 1 > 8):\n",
        "                        t1_reguler[8, j] +=  (1 + (tgl - t0).days)\n",
        "                    else:\n",
        "                        t1_reguler[np.floor(abs(keluar - 1) / 10).astype(int), j] +=  (1 + (tgl - t0).days )\n",
        "                else:\n",
        "                    u2=np.zeros((len(kolom2)))\n",
        "                    for k in range(0, len(kolom2)):\n",
        "                        u2[k] = abs(kolom2[k] - (datapeserta2['PSTV03'][i])).days / 365\n",
        "                        u2[k] = np.floor(abs(u2[k] - 1) / 10)\n",
        "                    unique_elements = np.unique(u2)\n",
        "                    second_unique_element = unique_elements[1]\n",
        "                    indices_of_second_unique = np.where(u2 == second_unique_element)[0]\n",
        "                    u = indices_of_second_unique[0]\n",
        "                    if (np.floor(abs(keluar - 1) / 10).astype(int) + 1) > 8 or (np.floor(abs(masuk - 1) / 10).astype(int) + 1)>8:\n",
        "                        t1_reguler[8, j]+=  (kolom2[int(u)] - t0).days\n",
        "                        t1_reguler[8, j]+=  (1 + ((tgl - kolom2[int(u)]).astype('timedelta64[D]')).astype('int'))\n",
        "                    else:\n",
        "                        t1_reguler[np.floor(abs(masuk - 1) / 10).astype(int), j] +=  (kolom2[int(u)] - t0).days\n",
        "                        t1_reguler[np.floor(abs(keluar - 1) / 10).astype(int), j] +=  (1 +((tgl - kolom2[int(u)]).astype('timedelta64[D]')).astype('int'))\n",
        "        j += 1\n",
        "\n",
        "    i += 1\n"
      ],
      "id": "a69f206b"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "31301c57"
      },
      "outputs": [],
      "source": [
        "t1_regular_1= pd.DataFrame(t1_reguler)\n",
        "\n",
        "\n",
        "with pd.ExcelWriter('t1_regular.xlsx') as writer:\n",
        "    t1_regular_1.to_excel(writer,sheet_name='t1_regular_1')"
      ],
      "id": "31301c57"
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "DJ8NFPABKw7x"
      },
      "id": "DJ8NFPABKw7x",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a4fe7118"
      },
      "source": [
        "## Menghitung ${t_1,t_2,t_3}$"
      ],
      "id": "a4fe7118"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "c903bb26"
      },
      "outputs": [],
      "source": [
        "t1 = np.zeros((9, len(kolom)))\n",
        "t2 = np.zeros((9, len(kolom)))\n",
        "t3 = np.zeros((9, len(kolom)))\n",
        "\n",
        "def hitungt(S, idx):\n",
        "    for i in range(len(S)):\n",
        "        pvt = pd.to_datetime(start_interval) #interval awal\n",
        "        status = 0\n",
        "        for j in range(S.shape[1]):\n",
        "            if S[i, j] != status: #jika peserta mengalami perubahan status, maka status berubah dan interval awal berubah\n",
        "                status = S[i, j]\n",
        "                pvt = pd.to_datetime(kolom[j])\n",
        "\n",
        "            if status == 0: #Jika bernilai 0 maka individu berada di status sehat\n",
        "                t1[idx, j] += 1 + (pd.to_datetime(kolom[j]) - pvt).days\n",
        "            elif status == 1:#Jika bernilai 1 maka individu berada di status Tb Paru\n",
        "                t2[idx, j] += 1 + (pd.to_datetime(kolom[j]) - pvt).days\n",
        "            elif status == 2:#Jika bernilai 2 maka individu berada di status Tb ekstra Paru\n",
        "                t3[idx, j] += 1 + (pd.to_datetime(kolom[j]) - pvt).days\n"
      ],
      "id": "c903bb26"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JqZ8_SORdL6Q",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6fdefaa3-a336-477c-d7b0-97d2c15f2fac"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.datetime64('2020-01-03T00:00:00.000000000')"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ],
      "source": [
        "kolom[1]"
      ],
      "id": "JqZ8_SORdL6Q"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IOi3Gnx2gdpt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "738c47dd-12d3-43f3-aa57-b3ea00e1fff0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Timestamp('2020-01-01 00:00:00')"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ],
      "source": [
        "start_interval"
      ],
      "id": "IOi3Gnx2gdpt"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "66086fb7"
      },
      "outputs": [],
      "source": [
        "hitungt(S1,0)\n",
        "hitungt(S2,1)\n",
        "hitungt(S3,2)\n",
        "hitungt(S4,3)\n",
        "hitungt(S5,4)\n",
        "hitungt(S6,5)\n",
        "hitungt(S7,6)\n",
        "hitungt(S8,7)\n",
        "hitungt(S9,8)"
      ],
      "id": "66086fb7"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "e59ff390"
      },
      "outputs": [],
      "source": [
        "t1_1= pd.DataFrame(t1)\n",
        "t2_1 = pd.DataFrame(t2)\n",
        "t3_1 = pd.DataFrame(t3)\n",
        "\n",
        "\n",
        "with pd.ExcelWriter('matrikt.xlsx') as writer:\n",
        "    t1_1.to_excel(writer,sheet_name='t1')\n",
        "    t2_1.to_excel(writer,sheet_name='t2')\n",
        "    t3_1.to_excel(writer,sheet_name='t3')"
      ],
      "id": "e59ff390"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b758a5ca"
      },
      "source": [
        "## Estimasi Intensitas Transisi"
      ],
      "id": "b758a5ca"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ef575af0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "66d313b3-8cc6-4603-b0a9-9f9fe388111d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-34-a7c327decc38>:9: RuntimeWarning: invalid value encountered in scalar divide\n",
            "  IT[3,j]=(transisi[4,j]+transisi[5,j])/(t2[idx,j])\n",
            "<ipython-input-34-a7c327decc38>:10: RuntimeWarning: invalid value encountered in scalar divide\n",
            "  IT[4,j]=(transisi[6,j]+transisi[7,j])/(t3[idx,j])\n"
          ]
        }
      ],
      "source": [
        "def intensitastransisi(transisi,sehat,meninggal,idx): #idx= kelompok usia; cm=mortality c=\n",
        "    tr=t1_reguler\n",
        "    IT=np.zeros((5,len(kolom)))\n",
        "    j=0\n",
        "    for j in range(len(kolom)):\n",
        "        IT[0,j]=(transisi[0,j]+sehat[0,j]+transisi[1,j])/(tr[idx,j]+t1[idx,j])\n",
        "        IT[1,j]=(transisi[0,j]+sehat[0,j]+transisi[2,j])/(tr[idx,j]+t1[idx,j])\n",
        "        IT[2,j]=(transisi[0,j]+sehat[0,j]+transisi[3,j]+meninggal[0,j])/(tr[idx,j]+t1[idx,j])\n",
        "        IT[3,j]=(transisi[4,j]+transisi[5,j])/(t2[idx,j])\n",
        "        IT[4,j]=(transisi[6,j]+transisi[7,j])/(t3[idx,j])\n",
        "    # Replace infinite values with 0\n",
        "    IT[np.isinf(IT)] = 0\n",
        "    # Replace NaN values with 0\n",
        "    IT[np.isnan(IT)] = 0\n",
        "    return IT\n",
        "\n",
        "#Intensitas Transisi per Kelompok Usia\n",
        "IT_1= intensitastransisi(c1,c_1,c_1_4,0)\n",
        "IT_2= intensitastransisi(c2,c_2,c_2_4,1)\n",
        "IT_3= intensitastransisi(c3,c_3,c_3_4,2)\n",
        "IT_4= intensitastransisi(c4,c_4,c_4_4,3)\n",
        "IT_5= intensitastransisi(c5,c_5,c_5_4,4)\n",
        "IT_6= intensitastransisi(c6,c_6,c_6_4,5)\n",
        "IT_7= intensitastransisi(c7,c_7,c_7_4,6)\n",
        "IT_8= intensitastransisi(c8,c_8,c_8_4,7)\n",
        "IT_9= intensitastransisi(c9,c_9,c_9_4,8)"
      ],
      "id": "ef575af0"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "c86af52e"
      },
      "outputs": [],
      "source": [
        "nIT_1 = pd.DataFrame(IT_1)\n",
        "nIT_2 = pd.DataFrame(IT_2)\n",
        "nIT_3 = pd.DataFrame(IT_3)\n",
        "nIT_4 = pd.DataFrame(IT_4)\n",
        "nIT_5 = pd.DataFrame(IT_5)\n",
        "nIT_6 = pd.DataFrame(IT_6)\n",
        "nIT_7 = pd.DataFrame(IT_7)\n",
        "nIT_8 = pd.DataFrame(IT_8)\n",
        "nIT_9 = pd.DataFrame(IT_9)\n",
        "\n",
        "\n",
        "with pd.ExcelWriter('Intensitas Transisi.xlsx') as writer:\n",
        "    nIT_1.to_excel(writer,sheet_name='IT_1')\n",
        "    nIT_2.to_excel(writer,sheet_name='IT_2')\n",
        "    nIT_3.to_excel(writer,sheet_name='IT_3')\n",
        "    nIT_4.to_excel(writer,sheet_name='IT_4')\n",
        "    nIT_5.to_excel(writer,sheet_name='IT_5')\n",
        "    nIT_6.to_excel(writer,sheet_name='IT_6')\n",
        "    nIT_7.to_excel(writer,sheet_name='IT_7')\n",
        "    nIT_8.to_excel(writer,sheet_name='IT_8')\n",
        "    nIT_9.to_excel(writer,sheet_name='IT_9')"
      ],
      "id": "c86af52e"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "d9279583"
      },
      "outputs": [],
      "source": [
        "matriksusia_1_4 = pd.DataFrame(c_1_4)\n",
        "matriksusia_2_4 = pd.DataFrame(c_2_4)\n",
        "matriksusia_3_4 = pd.DataFrame(c_3_4)\n",
        "matriksusia_4_4 = pd.DataFrame(c_4_4)\n",
        "matriksusia_5_4 = pd.DataFrame(c_5_4)\n",
        "matriksusia_6_4 = pd.DataFrame(c_6_4)\n",
        "matriksusia_7_4 = pd.DataFrame(c_7_4)\n",
        "matriksusia_8_4 = pd.DataFrame(c_8_4)\n",
        "matriksusia_9_4 = pd.DataFrame(c_9_4)\n",
        "\n",
        "with pd.ExcelWriter('menujukematian.xlsx') as writer:\n",
        "    matriksusia_1_4.to_excel(writer,sheet_name='matriksusia_1_4')\n",
        "    matriksusia_2_4.to_excel(writer,sheet_name='matriksusia_2_4')\n",
        "    matriksusia_3_4.to_excel(writer,sheet_name='matriksusia_3_4')\n",
        "    matriksusia_4_4.to_excel(writer,sheet_name='matriksusia_4_4')\n",
        "    matriksusia_5_4.to_excel(writer,sheet_name='matriksusia_5_4')\n",
        "    matriksusia_6_4.to_excel(writer,sheet_name='matriksusia_6_4')\n",
        "    matriksusia_7_4.to_excel(writer,sheet_name='matriksusia_7_4')\n",
        "    matriksusia_8_4.to_excel(writer,sheet_name='matriksusia_8_4')\n",
        "    matriksusia_9_4.to_excel(writer,sheet_name='matriksusia_9_4')"
      ],
      "id": "d9279583"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a82d4c6d"
      },
      "source": [
        "Keterangan:\n",
        "- IT[0,j] = $\\mu_{12}$\n",
        "- IT[1,j] = $\\mu_{13}$\n",
        "- IT[2,j] = $\\mu_{14}$\n",
        "- IT[3,j] = $\\mu_{24}$\n",
        "- IT[4,j] = $\\mu_{34}$"
      ],
      "id": "a82d4c6d"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4cd9d5c7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6cc9825c-0955-49f5-e30e-0d9d728680f4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.datetime64('2020-01-02T00:00:00.000000000')"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ],
      "source": [
        "kolom[0]"
      ],
      "id": "4cd9d5c7"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "de6b4177"
      },
      "source": [
        "## Perhitungan Peluang Transisi"
      ],
      "id": "de6b4177"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cefd1299"
      },
      "outputs": [],
      "source": [
        "def PeluangTransisi(IT):\n",
        "    P = np.zeros((8, len(kolom)))\n",
        "    t = 0\n",
        "    for j in range(len(kolom)):\n",
        "        if j == 0:\n",
        "            P[0, j] = 1\n",
        "            pass\n",
        "        if j ==0: #Jika j=0, maka selisih waktunya dari kolom dan interval awal\n",
        "          t = (kolom[j]-start_interval).days\n",
        "        else:\n",
        "          t = (kolom[j] - kolom[j - 1]).astype('timedelta64[D]').astype(float)\n",
        "        P[0, j] = np.exp(-1 * float(IT[0, j] + IT[1, j] + IT[2, j]) * t)\n",
        "        P[1, j] = (IT[0, j] / (IT[3, j] - IT[0, j] - IT[1, j] - IT[2, j])) * (np.exp(-1 * float(IT[0, j] + IT[1, j] + IT[2, j]) * t) - np.exp(-1*float(IT[3,j]) * t))\n",
        "        P[2, j] = (IT[1, j] / (IT[4, j] - IT[0, j] - IT[1, j] - IT[2, j])) * (np.exp(-1 * float(IT[0, j] + IT[1, j] + IT[2, j]) * t) - np.exp(-1*float(IT[4,j]) * t))\n",
        "        P[3, j] = 1 - (P[0,j]+P[1,j]+P[2,j])\n",
        "        P[4, j] = np.exp(-1 * float(IT[3, j]) * t)\n",
        "        P[5, j] = 1 - P[4, j]\n",
        "        P[6, j] = np.exp(-1 * float(IT[4, j]) * t)\n",
        "        P[7, j] = 1 - P[6, j]\n",
        "    # Replace infinite values with 0\n",
        "    P[np.isinf(P)] = 0\n",
        "    # Replace NaN values with 0\n",
        "    P[np.isnan(P)] = 0\n",
        "    return P\n",
        "\n",
        "# Example usage\n",
        "P_1 = PeluangTransisi(IT_1)\n",
        "P_2 = PeluangTransisi(IT_2)\n",
        "P_3 = PeluangTransisi(IT_3)\n",
        "P_4 = PeluangTransisi(IT_4)\n",
        "P_5 = PeluangTransisi(IT_5)\n",
        "P_6 = PeluangTransisi(IT_6)\n",
        "P_7 = PeluangTransisi(IT_7)\n",
        "P_8 = PeluangTransisi(IT_8)\n",
        "P_9 = PeluangTransisi(IT_9)\n"
      ],
      "id": "cefd1299"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d83945c6"
      },
      "source": [
        "Keterangan\n",
        "- P[0,j]=$P_{11}$\n",
        "- P[1,j]=$P_{12}$\n",
        "- P[2,j]=$P_{13}$\n",
        "- P[3,j]=$P_{14}$\n",
        "- P[4,j]=$P_{22}$\n",
        "- P[5,j]=$P_{24}$\n",
        "- P[6,j]=$P_{33}$\n",
        "- P[7,j]=$P_{34}$"
      ],
      "id": "d83945c6"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8e74424a"
      },
      "outputs": [],
      "source": [
        "P_1_1 = pd.DataFrame(P_1)\n",
        "P_2_1 = pd.DataFrame(P_2)\n",
        "\n",
        "P_3_1 = pd.DataFrame(P_3)\n",
        "P_4_1 = pd.DataFrame(P_4)\n",
        "P_5_1 = pd.DataFrame(P_5)\n",
        "P_6_1 = pd.DataFrame(P_6)\n",
        "P_7_1 = pd.DataFrame(P_7)\n",
        "P_8_1 = pd.DataFrame(P_8)\n",
        "P_9_1 = pd.DataFrame(P_9)\n",
        "\n",
        "\n",
        "with pd.ExcelWriter('prob.xlsx') as writer:\n",
        "    P_1_1.to_excel(writer,sheet_name='P_1')\n",
        "    P_2_1.to_excel(writer,sheet_name='P_2')\n",
        "    P_3_1.to_excel(writer,sheet_name='P_3')\n",
        "    P_4_1.to_excel(writer,sheet_name='P_4')\n",
        "    P_5_1.to_excel(writer,sheet_name='P_5')\n",
        "    P_6_1.to_excel(writer,sheet_name='P_6')\n",
        "    P_7_1.to_excel(writer,sheet_name='P_7')\n",
        "    P_8_1.to_excel(writer,sheet_name='P_8')\n",
        "    P_9_1.to_excel(writer,sheet_name='P_9')"
      ],
      "id": "8e74424a"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "133154b9"
      },
      "outputs": [],
      "source": [
        "def f_P(Prob):\n",
        "    P = np.zeros((1,8))\n",
        "    for i in range(8):\n",
        "        if np.any(Prob[i] > 0):\n",
        "            P[0,i] = np.mean(Prob[i])\n",
        "    return P\n",
        "\n",
        "mean_P_1 = f_P(P_1)\n",
        "mean_P_2 = f_P(P_2)\n",
        "mean_P_3 = f_P(P_3)\n",
        "mean_P_4 = f_P(P_4)\n",
        "mean_P_5 = f_P(P_5)\n",
        "mean_P_6 = f_P(P_6)\n",
        "mean_P_7 = f_P(P_7)\n",
        "mean_P_8 = f_P(P_8)\n",
        "mean_P_9 = f_P(P_9)\n"
      ],
      "id": "133154b9"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2202a35c"
      },
      "outputs": [],
      "source": [
        "mean_P_1_1 = pd.DataFrame(mean_P_1)\n",
        "mean_P_2_1 = pd.DataFrame(mean_P_2)\n",
        "mean_P_3_1 = pd.DataFrame(mean_P_3)\n",
        "mean_P_4_1 = pd.DataFrame(mean_P_4)\n",
        "mean_P_5_1 = pd.DataFrame(mean_P_5)\n",
        "mean_P_6_1 = pd.DataFrame(mean_P_6)\n",
        "mean_P_7_1 = pd.DataFrame(mean_P_7)\n",
        "mean_P_8_1 = pd.DataFrame(mean_P_8)\n",
        "mean_P_9_1 = pd.DataFrame(mean_P_9)\n",
        "\n",
        "\n",
        "with pd.ExcelWriter('meanprob.xlsx') as writer:\n",
        "    mean_P_1_1.to_excel(writer,sheet_name='mean_P_1')\n",
        "    mean_P_2_1.to_excel(writer,sheet_name='mean_P_2')\n",
        "    mean_P_3_1.to_excel(writer,sheet_name='mean_P_3')\n",
        "    mean_P_4_1.to_excel(writer,sheet_name='mean_P_4')\n",
        "    mean_P_5_1.to_excel(writer,sheet_name='mean_P_5')\n",
        "    mean_P_6_1.to_excel(writer,sheet_name='mean_P_6')\n",
        "    mean_P_7_1.to_excel(writer,sheet_name='mean_P_7')\n",
        "    mean_P_8_1.to_excel(writer,sheet_name='mean_P_8')\n",
        "    mean_P_9_1.to_excel(writer,sheet_name='mean_P_9')"
      ],
      "id": "2202a35c"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b8a9c289"
      },
      "source": [
        "## Perhitungan Premi"
      ],
      "id": "b8a9c289"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7560d3f2"
      },
      "outputs": [],
      "source": [
        "def Premi1(n,prob,prob2,bunga):\n",
        "    v=1/(1+bunga)\n",
        "    premi = 0\n",
        "    for i in range(1,n):\n",
        "        premi =premi+(v**i)*(prob**(i-1))*prob2\n",
        "    return(premi)\n",
        "def Premi2(n,prob,prob2,prob3, prob4,bunga):\n",
        "    v=1/(1+bunga)\n",
        "    premi = 0\n",
        "    for i in range(2,n):\n",
        "        for j in range(2,i):\n",
        "            premi =premi + (v**i)*(prob**(i-j))*(prob2)*(prob3**(j-2))*(prob4)\n",
        "    return(premi)"
      ],
      "id": "7560d3f2"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "23ff5528"
      },
      "outputs": [],
      "source": [
        "b1=b2=b3=10**7\n",
        "def NSP12(n,probusia,b,bunga):\n",
        "    nxp=0\n",
        "    nxp = b*Premi1(n,probusia[0,0],probusia[0,1],bunga)\n",
        "    return nxp\n",
        "def NSP13(n,probusia,b,bunga):\n",
        "    nxp=0\n",
        "    nxp = b*Premi1(n,probusia[0,0],probusia[0,2],bunga)\n",
        "    return nxp\n",
        "def NSP14(n,probusia,b,bunga):\n",
        "    nxp=0\n",
        "    nxp = b*Premi1(n,probusia[0,0],probusia[0,3],bunga)\n",
        "    +b*Premi2(n,probusia[0,0],probusia[0,1],probusia[0,4], probusia[0,5],bunga)\n",
        "    +b*Premi2(n,probusia[0,0],probusia[0,2],probusia[0,6], probusia[0,7],bunga)\n",
        "    return nxp"
      ],
      "id": "23ff5528"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0a10f999"
      },
      "source": [
        "## Premi 1 Tahun Rentang Usia 0-10 tahun"
      ],
      "id": "0a10f999"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3544437b"
      },
      "outputs": [],
      "source": [
        "NSP12_1=NSP12(365, mean_P_1, b1, 0.05/365)\n",
        "NSP13_1=NSP13(365, mean_P_1, b1, 0.05/365)\n",
        "NSP14_1=NSP14(365, mean_P_1, b1, 0.05/365)\n",
        "NSP_1=NSP12_1+NSP13_1+NSP14_1"
      ],
      "id": "3544437b"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9552583d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f9ce1123-c720-41c2-c239-fcd82b6eee6d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6842765.858747316"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ],
      "source": [
        "NSP_1"
      ],
      "id": "9552583d"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1bcfffd7"
      },
      "source": [
        "## Premi 1 Tahun Rentang Usia 10-20 tahun"
      ],
      "id": "1bcfffd7"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fba219a9"
      },
      "outputs": [],
      "source": [
        "NSP12_2=NSP12(365, mean_P_2, b1, 0.05/365)\n",
        "NSP13_2=NSP13(365, mean_P_2, b1, 0.05/365)\n",
        "NSP14_2=NSP14(365, mean_P_2, b1, 0.05/365)\n",
        "NSP_2=NSP12_2+NSP13_2+NSP14_2"
      ],
      "id": "fba219a9"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "30679a11",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d9b3b6c5-bf43-4950-b442-1456ec5b7ee2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7373283.138018545"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ],
      "source": [
        "NSP_2"
      ],
      "id": "30679a11"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "590aee57"
      },
      "source": [
        "## Kelompok Usia 20-30"
      ],
      "id": "590aee57"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ba01ff12"
      },
      "outputs": [],
      "source": [
        "NSP12_3=NSP12(365, mean_P_3, b1, 0.05/365)\n",
        "NSP13_3=NSP13(365, mean_P_3, b1, 0.05/365)\n",
        "NSP14_3=NSP14(365, mean_P_3, b1, 0.05/365)\n",
        "NSP_3=NSP12_3+NSP13_3+NSP14_3"
      ],
      "id": "ba01ff12"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7213679b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ec7672f5-a38e-4485-e9e4-dd20b88c261c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8048025.353748177"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ],
      "source": [
        "NSP_3"
      ],
      "id": "7213679b"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "c17d1ae5"
      },
      "outputs": [],
      "source": [
        "### Kelompok Usia 30-40"
      ],
      "id": "c17d1ae5"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5cebed3f"
      },
      "outputs": [],
      "source": [
        "NSP12_4=NSP12(365, mean_P_4, b1, 0.05/365)\n",
        "NSP13_4=NSP13(365, mean_P_4, b1, 0.05/365)\n",
        "NSP14_4=NSP14(365, mean_P_4, b1, 0.05/365)\n",
        "NSP_4=NSP12_4+NSP13_4+NSP14_4"
      ],
      "id": "5cebed3f"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "e298c495",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ec4fa963-cbf5-4fa9-a5b1-a4145360789e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7384879.134400925"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ],
      "source": [
        "NSP_4"
      ],
      "id": "e298c495"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "35aa2a61"
      },
      "outputs": [],
      "source": [
        "### Kelompok Usia 40-50"
      ],
      "id": "35aa2a61"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "55ee11fd"
      },
      "outputs": [],
      "source": [
        "NSP12_5=NSP12(365, mean_P_5, b1, 0.05/365)\n",
        "NSP13_5=NSP13(365, mean_P_5, b1, 0.05/365)\n",
        "NSP14_5=NSP14(365, mean_P_5, b1, 0.05/365)\n",
        "NSP_5=NSP12_5+NSP13_5+NSP14_5"
      ],
      "id": "55ee11fd"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "do8Gy3Hu9p-T",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "72f0a097-20b8-4c31-d66d-04a018e3e0ad"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6937563.827997445"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ],
      "source": [
        "NSP_5"
      ],
      "id": "do8Gy3Hu9p-T"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "506eb23c"
      },
      "outputs": [],
      "source": [
        "### Kelompok Usia 50-60"
      ],
      "id": "506eb23c"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "627f6874"
      },
      "outputs": [],
      "source": [
        "NSP12_6=NSP12(365, mean_P_6, b1, 0.05/365)\n",
        "NSP13_6=NSP13(365, mean_P_6, b1, 0.05/365)\n",
        "NSP14_6=NSP14(365, mean_P_6, b1, 0.05/365)\n",
        "NSP_6=NSP12_6+NSP13_6+NSP14_6"
      ],
      "id": "627f6874"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ca61214d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9816a70c-d88f-478a-e06e-b7e79df45aa7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6581560.654177936"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ],
      "source": [
        "NSP_6"
      ],
      "id": "ca61214d"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7f4eca54"
      },
      "outputs": [],
      "source": [
        "### Kelompok Usia 70-80"
      ],
      "id": "7f4eca54"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "772f9adb"
      },
      "outputs": [],
      "source": [
        "NSP12_7=NSP12(365, mean_P_7, b1, 0.05/365)\n",
        "NSP13_7=NSP13(365, mean_P_7, b1, 0.05/365)\n",
        "NSP14_7=NSP14(365, mean_P_7, b1, 0.05/365)\n",
        "NSP_7=NSP12_7+NSP13_7+NSP14_7"
      ],
      "id": "772f9adb"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "68239a1b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4f61f9d4-990f-4805-fa2c-8bf6355b3cbf"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5595472.503754042"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ],
      "source": [
        "NSP_7"
      ],
      "id": "68239a1b"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "a54fe8b7"
      },
      "outputs": [],
      "source": [
        "### Kelompok Usia 80-90"
      ],
      "id": "a54fe8b7"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "f0309131"
      },
      "outputs": [],
      "source": [
        "NSP12_8=NSP12(365, mean_P_8, b1, 0.05/365)\n",
        "NSP13_8=NSP13(365, mean_P_8, b1, 0.05/365)\n",
        "NSP14_8=NSP14(365, mean_P_8, b1, 0.05/365)\n",
        "NSP_8=NSP12_8+NSP13_8+NSP14_8"
      ],
      "id": "f0309131"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0657f460",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "14bfdee3-f355-42b9-a241-81dd36c876f6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1927124.772076556"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ],
      "source": [
        "NSP_8"
      ],
      "id": "0657f460"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "534e4b17"
      },
      "outputs": [],
      "source": [
        "### Kelompok Usia >80"
      ],
      "id": "534e4b17"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cbd988b4"
      },
      "outputs": [],
      "source": [
        "NSP12_9=NSP12(365, mean_P_9, b1, 0.05/365)\n",
        "NSP13_9=NSP13(365, mean_P_9, b1, 0.05/365)\n",
        "NSP14_9=NSP14(365, mean_P_9, b1, 0.05/365)\n",
        "NSP_9=NSP12_9+NSP13_9+NSP14_9"
      ],
      "id": "cbd988b4"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cc4bc4ac",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "120564f3-fdf3-4d0f-8888-e21c663870e3"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "364479.4265417662"
            ]
          },
          "execution_count": 67,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "NSP_9"
      ],
      "id": "cc4bc4ac"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6c8c6602"
      },
      "outputs": [],
      "source": [],
      "id": "6c8c6602"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "d2c5346d"
      },
      "outputs": [],
      "source": [],
      "id": "d2c5346d"
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
